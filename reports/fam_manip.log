Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
""" On importe pour vous les biblioth√®ques scientifiques utiles."""
import numpy as np
import matplotlib.pyplot as plt

"""Entrer ci-dessous les quatre vecteurs numpy correspondant :
- aux mesures de tensions
- aux mesures d'intensit√©
- aux estimations d'inceritude sur U (vous pouvez utiliser des variables interm√©diaires et des op√©rations sur les vecteurs numpy)
- aux estimations d'inceritude sur I (vous pouvez utiliser des variables interm√©diaires et des op√©rations sur les vecteurs numpy)
"""
u = np.array([])  # Valeurs de tensions
i = np.array([])  # Valeurs d'intensit√©

# Mettre ici vos interm√©diaires de calcul pour les calculs d'incertitude.
# NOTE : IL EST POSSIBLE QUE VOUS UTILISIEZ DES FORMULES

uu = np.array([])  # Incertitudes sur les tensions (ce sera un vecteur numpy)
ui = np.array([])  # Incertitudes sur les intensit√©s (ce sera un vecteur numpy)

"""Vous devez maintenant tracer le graphique. On rappelle :
- plt.subplots() cr√©e la fen√™tre graphique et  les axes (penser √† utiliser les variables)
- penser √† l√©gender les abscisses et les ordonn√©es (avec les unit√©s)
- Titrer votre graphique
- tracer les points de mesures non reli√©s avec les croix d'incertitude et l√©gender votre courbe.
- afficher la courbe avec plt.show() √† la fin
"""
f,ax = plt.subplots()
f.suptitle("Mettre un titre")
ax.set_xlabel("L√©gender les X")
ax.set_ylabel("L√©gender les Y")
ax.errorbar(u, i, xerr=uu, yerr=ui, legend="L√©gender la courbe", linestyle="",)
ax.grid()
ax.legend()
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-1-3ed7f8f141aa>[0m in [0;36m<module>[0;34m[0m
[1;32m     29[0m [0max[0m[0;34m.[0m[0mset_xlabel[0m[0;34m([0m[0;34m"L√©gender les X"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     30[0m [0max[0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m"L√©gender les Y"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 31[0;31m [0max[0m[0;34m.[0m[0merrorbar[0m[0;34m([0m[0mu[0m[0;34m,[0m [0mi[0m[0;34m,[0m [0mxerr[0m[0;34m=[0m[0muu[0m[0;34m,[0m [0myerr[0m[0;34m=[0m[0mui[0m[0;34m,[0m [0mlegend[0m[0;34m=[0m[0;34m"L√©gender la courbe"[0m[0;34m,[0m [0mlinestyle[0m[0;34m=[0m[0;34m""[0m[0;34m,[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     32[0m [0max[0m[0;34m.[0m[0mgrid[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     33[0m [0max[0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1445[0m     [0;32mdef[0m [0minner[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1446[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1447[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0mmap[0m[0;34m([0m[0msanitize_sequence[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1448[0m [0;34m[0m[0m
[1;32m   1449[0m         [0mbound[0m [0;34m=[0m [0mnew_sig[0m[0;34m.[0m[0mbind[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/axes/_axes.py[0m in [0;36merrorbar[0;34m(self, x, y, yerr, xerr, fmt, ecolor, elinewidth, capsize, barsabove, lolims, uplims, xlolims, xuplims, errorevery, capthick, **kwargs)[0m
[1;32m   3355[0m         [0mdata_line[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3356[0m         [0;32mif[0m [0mplot_line[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3357[0;31m             [0mdata_line[0m [0;34m=[0m [0mmlines[0m[0;34m.[0m[0mLine2D[0m[0;34m([0m[0mx[0m[0;34m,[0m [0my[0m[0;34m,[0m [0;34m**[0m[0mplot_line_style[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3358[0m             [0mself[0m[0;34m.[0m[0madd_line[0m[0;34m([0m[0mdata_line[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3359[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/lines.py[0m in [0;36m__init__[0;34m(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)[0m
[1;32m    388[0m         [0;31m# update kwargs before updating data to give the caller a[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    389[0m         [0;31m# chance to init axes (and hence unit support)[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 390[0;31m         [0mself[0m[0;34m.[0m[0mupdate[0m[0;34m([0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    391[0m         [0mself[0m[0;34m.[0m[0mpickradius[0m [0;34m=[0m [0mpickradius[0m[0;34m[0m[0;34m[0m[0m
[1;32m    392[0m         [0mself[0m[0;34m.[0m[0mind_offset[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/artist.py[0m in [0;36mupdate[0;34m(self, props)[0m
[1;32m    994[0m                     [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34mf"set_{k}"[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    995[0m                     [0;32mif[0m [0;32mnot[0m [0mcallable[0m[0;34m([0m[0mfunc[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 996[0;31m                         raise AttributeError(f"{type(self).__name__!r} object "
[0m[1;32m    997[0m                                              f"has no property {k!r}")
[1;32m    998[0m                     [0mret[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mfunc[0m[0;34m([0m[0mv[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mAttributeError[0m: 'Line2D' object has no property 'legend'
AttributeError: 'Line2D' object has no property 'legend'

