Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""Importation des biblioth√®ques utiles"""
import numpy as np
import matplotlib.pyplot as plt
import numpy.random as rd

"""Entrer les mesures des mesurandes directes ainsi que leurs incertitudes. 
S'il y a plusieurs sources, entrer un vecteur par source et les sommer.
"""

f = np.array([])  # Fr√©quences. On pourra consid√©rer qu'il n'y a pas d'incertitude sur les fr√©quences.
k = len(f)  # Nombre de mesures r√©alis√©es.


"""Entrez les valeurs des mesures et incertitudes"""
ue_m = np.array([])
ue_u1 = np.array([])
ue_u2 = np.array([])

us_m = np.array([])
us_u1 = np.array([])
us_u2 = np.array([])

deltat_m = np.array([])
deltat_u1 = np.array([])
deltat_u2 = np.array([])

"""Grandeurs simul√©es"""
N = 1000000
ue_sim = ue_m + rd.uniform(-ue_u1, ue_u1, (N, k))
us_sim = us_m + rd.uniform(-us_u1, us_u1, (N, k))
deltat_sim = deltat_m + rd.uniform(-deltat_u1, deltat_u1, (N, k))

""" Il faut aussi cr√©er des vecteurs pour les incertitudes.
A vous de cr√©er les simulation des grandeurs utiles √† partir de chaque mesurande directe ue, us, deltat.
Vous devez avoir des vecteurs de taille k.
Le log d√©cimal est la fonction np.log10()
"""
phi_sim = np.array([])
g_sim = np.array([])
gdb_sim = np.array([])





"""
- Prendre la moyenne des gains en d√©cibel et des phases pour obtenir les grandeurs mesur√©es.
On rappelle la formule pour des moyennes uniquement par colonne :
np.mean(gb_sim, axis=0)

- Prendre l'√©cart-type des gains en d√©cibel et des phases pour obtenir les incertitudes de mesures.
On rappelle la formule pour des √©cart-type uniquement par colonne :
np.std(gb_sim, ddof=1, axis=0)
"""
phi_m = np.mean(phi_sim, axis=0)
gdb_m = np.mean(gdb_sim, axis=0)
phi_u = np.std(phi_sim, ddof=1, axis=0)
gdb_u = np.std(gdb_sim, ddof=1, axis=0)






"""
Tracer le diagramme de Bode en gain et en phase du filtre.
Il n'est pas utile de calculer log(f). Pour passer en √©chelle des abscisses logarithmiques,
on utilisera la fonction :
ax.set_xscale("log")
(si la zone de trac√© s'appelle ax)

- Pensez √† l√©gender vos deux graphiques.
- Utiliser f.savefig("nom_dufichier.png") pour sauvegarder la figure f et l'int√©grer dans votre compte-rendu.
"""
f, ax = plt.subplots(2, 1, sharex='col')  # Forcer la m√™me abscisse
f.suptitle("Titre")
ax[0].set_xlabel("L√©gende")
ax[0].set_ylabel("L√©gende")
ax[0].errorbar(f, gdb_m, yerr=gdb_u, label="L√©gende", linestyle="")
ax[0].legend()
ax[0].grid()
ax[0].set_xscale("log")

ax[1].set_xlabel("L√©gende")
ax[1].set_ylabel("L√©gende")
ax[1].errorbar(f, phi_m, yerr=phi_u, label="L√©gende", linestyle="")
ax[1].legend()
ax[1].grid()
ax[1].set_xscale("log")

f.tight_layout()  # Am√©lioration de l'apparence
plt.show()


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-1-414d058044ce>[0m in [0;36m<module>[0;34m[0m
[1;32m     77[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mset_xlabel[0m[0;34m([0m[0;34m"L√©gende"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     78[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m"L√©gende"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 79[0;31m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0merrorbar[0m[0;34m([0m[0mf[0m[0;34m,[0m [0mgdb_m[0m[0;34m,[0m [0myerr[0m[0;34m=[0m[0mgdb_u[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m"L√©gende"[0m[0;34m,[0m [0mlinestyle[0m[0;34m=[0m[0;34m""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     80[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     81[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mgrid[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1445[0m     [0;32mdef[0m [0minner[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1446[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1447[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0mmap[0m[0;34m([0m[0msanitize_sequence[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1448[0m [0;34m[0m[0m
[1;32m   1449[0m         [0mbound[0m [0;34m=[0m [0mnew_sig[0m[0;34m.[0m[0mbind[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/axes/_axes.py[0m in [0;36merrorbar[0;34m(self, x, y, yerr, xerr, fmt, ecolor, elinewidth, capsize, barsabove, lolims, uplims, xlolims, xuplims, errorevery, capthick, **kwargs)[0m
[1;32m   3356[0m         [0;32mif[0m [0mplot_line[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3357[0m             [0mdata_line[0m [0;34m=[0m [0mmlines[0m[0;34m.[0m[0mLine2D[0m[0;34m([0m[0mx[0m[0;34m,[0m [0my[0m[0;34m,[0m [0;34m**[0m[0mplot_line_style[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3358[0;31m             [0mself[0m[0;34m.[0m[0madd_line[0m[0;34m([0m[0mdata_line[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3359[0m [0;34m[0m[0m
[1;32m   3360[0m         [0mbarcols[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/axes/_base.py[0m in [0;36madd_line[0;34m(self, line)[0m
[1;32m   1962[0m             [0mline[0m[0;34m.[0m[0mset_clip_path[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mpatch[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1963[0m [0;34m[0m[0m
[0;32m-> 1964[0;31m         [0mself[0m[0;34m.[0m[0m_update_line_limits[0m[0;34m([0m[0mline[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1965[0m         [0;32mif[0m [0;32mnot[0m [0mline[0m[0;34m.[0m[0mget_label[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1966[0m             [0mline[0m[0;34m.[0m[0mset_label[0m[0;34m([0m[0;34m'_line%d'[0m [0;34m%[0m [0mlen[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mlines[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/axes/_base.py[0m in [0;36m_update_line_limits[0;34m(self, line)[0m
[1;32m   1984[0m         [0mFigures[0m [0mout[0m [0mthe[0m [0mdata[0m [0mlimit[0m [0mof[0m [0mthe[0m [0mgiven[0m [0mline[0m[0;34m,[0m [0mupdating[0m [0mself[0m[0;34m.[0m[0mdataLim[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1985[0m         """
[0;32m-> 1986[0;31m         [0mpath[0m [0;34m=[0m [0mline[0m[0;34m.[0m[0mget_path[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1987[0m         [0;32mif[0m [0mpath[0m[0;34m.[0m[0mvertices[0m[0;34m.[0m[0msize[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1988[0m             [0;32mreturn[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/lines.py[0m in [0;36mget_path[0;34m(self)[0m
[1;32m   1009[0m         """
[1;32m   1010[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_invalidy[0m [0;32mor[0m [0mself[0m[0;34m.[0m[0m_invalidx[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1011[0;31m             [0mself[0m[0;34m.[0m[0mrecache[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1012[0m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_path[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1013[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/lines.py[0m in [0;36mrecache[0;34m(self, always)[0m
[1;32m    651[0m         [0;32mif[0m [0malways[0m [0;32mor[0m [0mself[0m[0;34m.[0m[0m_invalidx[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    652[0m             [0mxconv[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mconvert_xunits[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_xorig[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 653[0;31m             [0mx[0m [0;34m=[0m [0m_to_unmasked_float_array[0m[0;34m([0m[0mxconv[0m[0;34m)[0m[0;34m.[0m[0mravel[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    654[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    655[0m             [0mx[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_x[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/cbook/__init__.py[0m in [0;36m_to_unmasked_float_array[0;34m(x)[0m
[1;32m   1287[0m         [0;32mreturn[0m [0mnp[0m[0;34m.[0m[0mma[0m[0;34m.[0m[0masarray[0m[0;34m([0m[0mx[0m[0;34m,[0m [0mfloat[0m[0;34m)[0m[0;34m.[0m[0mfilled[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mnan[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1288[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1289[0;31m         [0;32mreturn[0m [0mnp[0m[0;34m.[0m[0masarray[0m[0;34m([0m[0mx[0m[0;34m,[0m [0mfloat[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1290[0m [0;34m[0m[0m
[1;32m   1291[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/numpy/core/_asarray.py[0m in [0;36masarray[0;34m(a, dtype, order)[0m
[1;32m     81[0m [0;34m[0m[0m
[1;32m     82[0m     """
[0;32m---> 83[0;31m     [0;32mreturn[0m [0marray[0m[0;34m([0m[0ma[0m[0;34m,[0m [0mdtype[0m[0;34m,[0m [0mcopy[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0morder[0m[0;34m=[0m[0morder[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m [0;34m[0m[0m

[0;31mTypeError[0m: float() argument must be a string or a number, not 'Figure'
TypeError: float() argument must be a string or a number, not 'Figure'

