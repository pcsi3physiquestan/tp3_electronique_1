Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""Importation des biblioth√®ques utiles"""
import numpy as np
import matplotlib.pyplot as plt
import numpy.random as rd

"""Entrer les mesures des mesurandes directes ainsi que leurs incertitudes. 
S'il y a plusieurs sources, entrer un vecteur par source et les sommer.
"""

f = np.array([])  # Fr√©quences. On pourra consid√©rer qu'il n'y a pas d'incertitude sur les fr√©quences.
k = len(f)  # Nombre de mesures r√©alis√©es.


"""Entrez les valeurs des mesures et incertitudes"""
ue_m = np.array([])
ue_u1 = np.array([])
ue_u2 = np.array([])

us_m = np.array([])
us_u1 = np.array([])
us_u2 = np.array([])

deltat_m = np.array([])
deltat_u1 = np.array([])
deltat_u2 = np.array([])

"""Grandeurs simul√©es"""
N = 1000000
ue_sim = ue_m + rd.uniform(-ue_u1, ue_u1, (N, k))
us_sim = us_m + rd.uniform(-us_u1, us_u1, (N, k))
deltat_sim = deltat_m + rd.uniform(-deltat_u1, deltat_u1, (N, k))

""" Il faut aussi cr√©er des vecteurs pour les incertitudes.
A vous de cr√©er les simulation des grandeurs utiles √† partir de chaque mesurande directe ue, us, deltat.
Vous devez avoir des vecteurs de taille k.
Le log d√©cimal est la fonction np.log10()
"""
phi_sim = 0
g_sim = 0
gdb_sim = 0





"""
- Prendre la moyenne des gains en d√©cibel et des phases pour obtenir les grandeurs mesur√©es.
On rappelle la formule pour des moyennes uniquement par colonne :
np.mean(gb_sim, axis=0)

- Prendre l'√©cart-type des gains en d√©cibel et des phases pour obtenir les incertitudes de mesures.
On rappelle la formule pour des √©cart-type uniquement par colonne :
np.std(gb_sim, ddof=1, axis=0)
"""
phi_m = np.mean(phi_sim, axis=0)
gdb_m = np.mean(gdb_sim, axis=0)
phi_u = np.std(phi_sim, ddof=1, axis=0)
gdb_u = np.std(gdb_sim, ddof=1, axis=0)






"""
Tracer le diagramme de Bode en gain et en phase du filtre.
Il n'est pas utile de calculer log(f). Pour passer en √©chelle des abscisses logarithmiques,
on utilisera la fonction :
ax.set_xscale("log")
(si la zone de trac√© s'appelle ax)

- Pensez √† l√©gender vos deux graphiques.
- Utiliser f.savefig("nom_dufichier.png") pour sauvegarder la figure f et l'int√©grer dans votre compte-rendu.
"""
f, ax = plt.subplots(2, 1, sharex='col')  # Forcer la m√™me abscisse
f.suptitle("Titre")
ax[0].set_xlabel("L√©gende")
ax[0].set_ylabel("L√©gende")
ax[0].errorbar(f, gdb_m, yerr=gdb_u, label="L√©gende", linestyle="")
ax[0].legend()
ax[0].grid()
ax[0].set_xscale("log")

ax[1].set_xlabel("L√©gende")
ax[1].set_ylabel("L√©gende")
ax[1].errorbar(f, phi_m, yerr=phi_u, label="L√©gende", linestyle="")
ax[1].legend()
ax[1].grid()
ax[1].set_xscale("log")

f.tight_layout()  # Am√©lioration de l'apparence
plt.show()


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAxisError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-1-3e34234f01dd>[0m in [0;36m<module>[0;34m[0m
[1;32m     53[0m [0mnp[0m[0;34m.[0m[0mstd[0m[0;34m([0m[0mgb_sim[0m[0;34m,[0m [0mddof[0m[0;34m=[0m[0;36m1[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     54[0m """
[0;32m---> 55[0;31m [0mphi_m[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mphi_sim[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     56[0m [0mgdb_m[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mgdb_sim[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     57[0m [0mphi_u[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mstd[0m[0;34m([0m[0mphi_sim[0m[0;34m,[0m [0mddof[0m[0;34m=[0m[0;36m1[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m<__array_function__ internals>[0m in [0;36mmean[0;34m(*args, **kwargs)[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/numpy/core/fromnumeric.py[0m in [0;36mmean[0;34m(a, axis, dtype, out, keepdims)[0m
[1;32m   3370[0m             [0;32mreturn[0m [0mmean[0m[0;34m([0m[0maxis[0m[0;34m=[0m[0maxis[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdtype[0m[0;34m,[0m [0mout[0m[0;34m=[0m[0mout[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3371[0m [0;34m[0m[0m
[0;32m-> 3372[0;31m     return _methods._mean(a, axis=axis, dtype=dtype,
[0m[1;32m   3373[0m                           out=out, **kwargs)
[1;32m   3374[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/numpy/core/_methods.py[0m in [0;36m_mean[0;34m(a, axis, dtype, out, keepdims)[0m
[1;32m    145[0m [0;34m[0m[0m
[1;32m    146[0m     [0mis_float16_result[0m [0;34m=[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 147[0;31m     [0mrcount[0m [0;34m=[0m [0m_count_reduce_items[0m[0;34m([0m[0marr[0m[0;34m,[0m [0maxis[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    148[0m     [0;31m# Make this warning show up first[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    149[0m     [0;32mif[0m [0mrcount[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/numpy/core/_methods.py[0m in [0;36m_count_reduce_items[0;34m(arr, axis)[0m
[1;32m     64[0m     [0mitems[0m [0;34m=[0m [0;36m1[0m[0;34m[0m[0;34m[0m[0m
[1;32m     65[0m     [0;32mfor[0m [0max[0m [0;32min[0m [0maxis[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 66[0;31m         [0mitems[0m [0;34m*=[0m [0marr[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0mmu[0m[0;34m.[0m[0mnormalize_axis_index[0m[0;34m([0m[0max[0m[0;34m,[0m [0marr[0m[0;34m.[0m[0mndim[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     67[0m     [0;32mreturn[0m [0mitems[0m[0;34m[0m[0;34m[0m[0m
[1;32m     68[0m [0;34m[0m[0m

[0;31mAxisError[0m: axis 0 is out of bounds for array of dimension 0
AxisError: axis 0 is out of bounds for array of dimension 0

