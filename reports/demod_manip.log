Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/prepa/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""Importation des biblioth√®ques utiles"""
import numpy as np
import matplotlib.pyplot as plt
import numpy.random as rd

"""Entrer les mesures des mesurandes directes ainsi que leurs incertitudes. 
S'il y a plusieurs sources, entrer un vecteur par source et les sommer.
"""

freqs = np.array([])  # Fr√©quences. On pourra consid√©rer qu'il n'y a pas d'incertitude sur les fr√©quences.
k = len(freqs)  # Nombre de mesures r√©alis√©es.


"""Entrez les valeurs des mesures et incertitudes"""
ue_m = np.array([])
ue_u1 = np.array([])
ue_u2 = np.array([])

us_m = np.array([])
us_u1 = np.array([])
us_u2 = np.array([])

deltat_m = np.array([])
deltat_u1 = np.array([])
deltat_u2 = np.array([])

"""Grandeurs simul√©es"""
N = 1000000
ue_sim = ue_m + rd.uniform(-ue_u1, ue_u1, (N, k))
us_sim = us_m + rd.uniform(-us_u1, us_u1, (N, k))
deltat_sim = deltat_m + rd.uniform(-deltat_u1, deltat_u1, (N, k))

""" Il faut aussi cr√©er des vecteurs pour les incertitudes.
A vous de cr√©er les simulation des grandeurs utiles √† partir de chaque mesurande directe ue, us, deltat.
Vous devez avoir des vecteurs de taille k.
Le log d√©cimal est la fonction np.log10()
"""
phi_sim = np.array([])
g_sim = np.array([])
gdb_sim = np.array([])





"""
- Prendre la moyenne des gains en d√©cibel et des phases pour obtenir les grandeurs mesur√©es.
On rappelle la formule pour des moyennes uniquement par colonne :
np.mean(gb_sim, axis=0)

- Prendre l'√©cart-type des gains en d√©cibel et des phases pour obtenir les incertitudes de mesures.
On rappelle la formule pour des √©cart-type uniquement par colonne :
np.std(gb_sim, ddof=1, axis=0)
"""
phi_m = np.mean(phi_sim, axis=0)
gdb_m = np.mean(gdb_sim, axis=0)
phi_u = np.std(phi_sim, ddof=1, axis=0)
gdb_u = np.std(gdb_sim, ddof=1, axis=0)






"""
Tracer le diagramme de Bode en gain et en phase du filtre.
Il n'est pas utile de calculer log(f). Pour passer en √©chelle des abscisses logarithmiques,
on utilisera la fonction :
ax.set_xscale("log")
(si la zone de trac√© s'appelle ax)

- Pensez √† l√©gender vos deux graphiques.
- Utiliser f.savefig("nom_dufichier.png") pour sauvegarder la figure f et l'int√©grer dans votre compte-rendu.
"""
f, ax = plt.subplots(2, 1, sharex='col')  # Forcer la m√™me abscisse
f.suptitle("Titre")
ax[0].set_xlabel("L√©gende")
ax[0].set_ylabel("L√©gende")
ax[0].errorbar(freqs, gdb_m, yerr=gdb_u, label="L√©gende", linestyle="")
ax[0].legend()
ax[0].grid()
ax[0].set_xscale("log")

ax[1].set_xlabel("L√©gende")
ax[1].set_ylabel("L√©gende")
ax[1].errorbar(freqs, phi_m, yerr=phi_u, label="L√©gende", linestyle="")
ax[1].legend()
ax[1].grid()
ax[1].set_xscale("log")

f.tight_layout()  # Am√©lioration de l'apparence
plt.show()


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-1-dc01bcc61564>[0m in [0;36m<module>[0;34m[0m
[1;32m     77[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mset_xlabel[0m[0;34m([0m[0;34m"L√©gende"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     78[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m"L√©gende"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 79[0;31m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0merrorbar[0m[0;34m([0m[0mfreqs[0m[0;34m,[0m [0mgdb_m[0m[0;34m,[0m [0myerr[0m[0;34m=[0m[0mgdb_u[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m"L√©gende"[0m[0;34m,[0m [0mlinestyle[0m[0;34m=[0m[0;34m""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     80[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     81[0m [0max[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mgrid[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1445[0m     [0;32mdef[0m [0minner[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1446[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1447[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0mmap[0m[0;34m([0m[0msanitize_sequence[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1448[0m [0;34m[0m[0m
[1;32m   1449[0m         [0mbound[0m [0;34m=[0m [0mnew_sig[0m[0;34m.[0m[0mbind[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/prepa/lib/python3.9/site-packages/matplotlib/axes/_axes.py[0m in [0;36merrorbar[0;34m(self, x, y, yerr, xerr, fmt, ecolor, elinewidth, capsize, barsabove, lolims, uplims, xlolims, xuplims, errorevery, capthick, **kwargs)[0m
[1;32m   3296[0m [0;34m[0m[0m
[1;32m   3297[0m         [0;32mif[0m [0mlen[0m[0;34m([0m[0mx[0m[0;34m)[0m [0;34m!=[0m [0mlen[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3298[0;31m             [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m"'x' and 'y' must have the same size"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3299[0m [0;34m[0m[0m
[1;32m   3300[0m         [0;32mif[0m [0mxerr[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: 'x' and 'y' must have the same size
ValueError: 'x' and 'y' must have the same size

